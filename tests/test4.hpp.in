#pragma once

#cmakedefine DYNOHOOK_TEST_NAME "@DYNOHOOK_TEST_NAME@"
#cmakedefine DYNOHOOK_TEST_CONV @DYNOHOOK_TEST_CONV@
#cmakedefine DYNOHOOK_TEST_OBJECT @DYNOHOOK_TEST_OBJECT@
#cmakedefine DYNOHOOK_TEST_HEADER "dynohook/conventions/@DYNOHOOK_TEST_HEADER@.hpp"
#cmakedefine DYNOHOOK_TEST_NAMESPACE @DYNOHOOK_TEST_NAMESPACE@

#include "dynohook/manager.hpp"
#include DYNOHOOK_TEST_HEADER

namespace DYNOHOOK_TEST_NAMESPACE {
    int g_iMyFuncCallCount = 0;
    int g_iPreMyFuncCallCount = 0;
    int g_iPostMyFuncCallCount = 0;

    using namespace dyno;

    ASMJIT_NOINLINE double DYNOHOOK_TEST_CONV MyFunc(int x, float y, float z) {
        g_iMyFuncCallCount++;
        assert(x == 3);
        assert(y == 10.0f);
        assert(z == 20.0f);

        double result = static_cast<double>(x) + y + z;
        assert(result == 33.0);

        return result;
    }

    ReturnAction PreMyFunc(HookType hookType, Hook& hook) {
        g_iPreMyFuncCallCount++;
        int x = hook.getArgument<int>(0);
        assert(x == 3);

        float y = hook.getArgument<float>(1);
        assert(y == 10.0f);

		float z = hook.getArgument<float>(2);
        assert(z == 20.0f);

        return ReturnAction::Ignored;
    }

    ReturnAction PostMyFunc(HookType hookType, Hook& hook) {
        g_iPostMyFuncCallCount++;
        int x = hook.getArgument<int>(0);
        assert(x == 3);

        float y = hook.getArgument<float>(1);
        assert(y == 10.0f);

		float z = hook.getArgument<float>(2);
        assert(z == 20.0f);

        double return_value = hook.getReturnValue<double>();
        assert(return_value == 33.0);

        hook.setReturnValue<double>(1337.0);

        return ReturnAction::Ignored;
    }

    void test() {
        HookManager& hookMngr = HookManager::Get();

        // Hook the function
        Hook* pHook = hookMngr.hook((void *) &MyFunc, new DYNOHOOK_TEST_OBJECT({DataType::Int, DataType::Float, DataType::Float}, DataType::Double));

        // Add the callbacks
        pHook->addCallback(HookType::Pre, (HookHandler *) (void *) &PreMyFunc);
        pHook->addCallback(HookType::Post, (HookHandler *) (void *) &PostMyFunc);

        // Call the function
        double ret = MyFunc(3, 10.0f, 20.f);

        assert(g_iMyFuncCallCount == 1);
        assert(g_iPreMyFuncCallCount == 1);
        assert(g_iPostMyFuncCallCount == 1);
        assert(ret == 1337.0);

        hookMngr.unhookAll();

        printf("Test: \"%s\" was passed\n", DYNOHOOK_TEST_NAME);
    }
}